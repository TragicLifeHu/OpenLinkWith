buildscript {
    ext.ci = 'true' == System.getenv('CI')
    ext.isPlay = project.hasProperty('play')
    ext.configFile = { fileName ->
        rootProject.file("gradle/$fileName")
    }

    def versionMajor = 2
    def versionMinor = 10
    def versionBuild = 0
    ext.playPublishTrack = 'internal'

    ext.versions = [
            compileSdk : 34,
            minSdk     : 22,
            versionCode: versionMajor * 10000 + versionMinor * 100 + versionBuild,
            versionName: "${versionMajor}.${versionMinor}",

            dagger     : '2.52',
            lifecycle  : '2.8.4',
            kotlin     : '2.0.20',
            ktlint     : '1.3.1',
            okHttp     : '4.12.0',
            room       : '2.6.1',
    ]

    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.5.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath 'gradle.plugin.gradle-build-properties-plugin:plugin:0.4.1'
        classpath 'io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.14.1'
        classpath 'org.jlleitschuh.gradle:ktlint-gradle:9.4.1'
        classpath 'com.gradleup:static-analysis-plugin:1.4'
        classpath 'com.gradleup:auto-manifest-plugin:1.0.4'
        if (isPlay) {
            classpath 'com.google.gms:google-services:4.3.10'
            classpath 'com.google.firebase:firebase-crashlytics-gradle:2.8.1'
            classpath 'com.github.triplet.gradle:play-publisher:3.7.0-agp4.2'
        }
    }
}
apply plugin: 'com.gradleup.auto.manifest'
apply plugin: 'com.novoda.build-properties'

autoManifest {
    packageName = 'com.tasomaniac.openwith'
    replaceDashesWithDot = true
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    if (project.name != 'test-support' && project.name != 'base-translations') {
        apply from: configFile('static-analysis.gradle')
    }
}
